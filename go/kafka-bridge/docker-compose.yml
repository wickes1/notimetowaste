name: kafka-bridge
volumes:
    redpanda: null
    postgres: null

services:
    migrate:
        container_name: ${COMPOSE_PROJECT_NAME}-migrate
        build:
            context: .
            dockerfile: Dockerfile
        command: ["./server", "--migrate"]
        volumes:
            - ./migrations:/root/migrations
            - ./certs:/root/certs
            - .env:/root/.env
        depends_on:
            - postgres

    server:
        container_name: ${COMPOSE_PROJECT_NAME}-server
        build:
            context: .
            dockerfile: Dockerfile
        command: ["./server"]
        volumes:
            - ./migrations:/root/migrations
            - ./certs:/root/certs
            - .env:/root/.env
        depends_on:
            migrate:
                condition: service_completed_successfully
        ports:
            - 8000:8000

    consumer:
        container_name: ${COMPOSE_PROJECT_NAME}-consumer
        build:
            context: .
            dockerfile: Dockerfile
        command: ["./consumer"]
        volumes:
            - ./migrations:/root/migrations
            - ./certs:/root/certs
            - .env:/root/.env
        depends_on:
            migrate:
                condition: service_completed_successfully
            redpanda:
                condition: service_healthy

    producer:
        container_name: ${COMPOSE_PROJECT_NAME}-producer
        build:
            context: .
            dockerfile: Dockerfile
        command: ["./producer"]
        volumes:
            - ./migrations:/root/migrations
            - ./certs:/root/certs
            - .env:/root/.env
        depends_on:
            redpanda:
                condition: service_healthy

    postgres:
        container_name: ${COMPOSE_PROJECT_NAME}-postgres
        image: postgres:15
        environment:
            POSTGRES_USER: ${POSTGRES_USER:-postgres}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
            PGDATA: /data/postgres
        volumes:
            - postgres:/data
        ports:
            - 5432:5432
        restart: unless-stopped
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
            interval: 5s
            timeout: 5s
            retries: 5
    redpanda:
        container_name: ${COMPOSE_PROJECT_NAME}-redpanda
        command:
            - redpanda
            - start
            - --kafka-addr internal://0.0.0.0:9092,external://0.0.0.0:19092
            - --advertise-kafka-addr internal://redpanda:9092,external://localhost:19092
            - --pandaproxy-addr internal://0.0.0.0:8082,external://0.0.0.0:18082
            - --advertise-pandaproxy-addr internal://redpanda:8082,external://localhost:18082
            - --schema-registry-addr internal://0.0.0.0:8081,external://0.0.0.0:18081
            - --rpc-addr redpanda:33145
            - --advertise-rpc-addr redpanda:33145
            - --mode dev-container
            - --smp 1
            - --default-log-level=info
        image: docker.redpanda.com/redpandadata/redpanda
        volumes:
            - redpanda:/var/lib/redpanda/data
        ports:
            - 18081:18081
            - 18082:18082
            - 19092:19092
            - 19644:9644
        healthcheck:
            test: ["CMD-SHELL", "bash -c 'echo > /dev/tcp/localhost/9092'"]
            interval: 10s
            timeout: 5s
            retries: 5
    console:
        container_name: ${COMPOSE_PROJECT_NAME}-redpanda-console
        image: docker.redpanda.com/redpandadata/console
        entrypoint: /bin/sh
        command: -c 'echo "$$CONSOLE_CONFIG_FILE" > /tmp/config.yml; /app/console'
        environment:
            CONFIG_FILEPATH: /tmp/config.yml
            CONSOLE_CONFIG_FILE: |
                kafka:
                  brokers: ["${COMPOSE_PROJECT_NAME}-redpanda:9092"]
                  schemaRegistry:
                    enabled: true
                    urls: ["http://${COMPOSE_PROJECT_NAME}-redpanda:8081"]
                redpanda:
                  adminApi:
                    enabled: true
                    urls: ["http://${COMPOSE_PROJECT_NAME}-redpanda:9644"]
        ports:
            - 8080:8080
        depends_on:
            redpanda:
                condition: service_healthy
